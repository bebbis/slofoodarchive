---
// la riga in questi trattini dice all'indice quali devono essere le caratteristiche di base
import Airtable from 'airtable';

// Configura Airtable
const base = new Airtable({
  apiKey: import.meta.env.PUBLIC_AIRTABLE_API_KEY
}).base(import.meta.env.PUBLIC_AIRTABLE_BASE_ID);

// Recupera i dati
let items = [];
try {
  const records = await base(import.meta.env.PUBLIC_AIRTABLE_TABLE_NAME)
  .select({ maxRecords: 100 })
    .all();
 
  items = records.map(record => ({
    id: record.id,
    name: record.fields.Name,
    description: record.fields.Description,
    image: record.fields.Image?.[0]?.url,
    category: record.fields.Category,
    region: record.fields.Region,
    seasonality: record.fields.Seasonality,
    producers: record.fields.Producers
  }));
} catch (error) {
  console.error('Errore caricamento dati:', error);
}

// --- LOGICA PER LA DATA E L'ORA IN INGLESE ---
const now = new Date();
const months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

const day = now.getDate();
const month = months[now.getMonth()];
const year = now.getFullYear();

const hours = now.getHours().toString().padStart(2, '0');
const minutes = now.getMinutes().toString().padStart(2, '0');
const seconds = now.getSeconds().toString().padStart(2, '0');

const dataCorrente = `${day} ${month} ${year}`;
const oraCorrente = `${hours}:${minutes}:${seconds}`;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Astro</title>
    
    <style>
      /* --- IMPOSTAZIONI GLOBALI --- */
      html {
        cursor: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 16 16'><circle cx='8' cy='8' r='2' fill='black'/><circle cx='8' cy='8' r='7' stroke='black' stroke-width='1' fill='none'/></svg>"), auto;
      }
      
      body {
        background-color: #ffffff; color: #000000; font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        line-height: 1.6; margin: 0; padding: 0; overflow-x: hidden;
      }
      body.panel-open { overflow: hidden; }

      /* --- TIPOGRAFIA --- */
      h1 {
        position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); font-size: 20px; font-weight: 700;
        text-align: center; line-height: 30px; z-index: 5; margin: 0; padding: 0; color: #000; white-space: nowrap;
      }

      /* --- CONTENITORE PER LE IMMAGINI SPARSE --- */
      .image-canvas {
        position: relative; /* Cambiato per permettere lo scroll se necessario */
        width: 100%;
        min-height: 100vh;
      }

      /* --- STILE DEL CONTENITORE 'card' --- */
      .card {
        position: absolute; width: 100px; height: 100px; overflow: hidden;
        cursor: pointer; transition: transform 0.3s ease, box-shadow 0.3s ease;
      }
      .card img {
        width: 100%; height: 100%; object-fit: cover; display: block;
      }
      /* L'hover fa solo un leggero ingrandimento per feedback */
      .card:hover {
        z-index: 10;
        transform: scale(1.1);
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
      }
      
      /* --- ETICHETTE (usate nel pannello) --- */
      .category {
        display: inline-block; font-size: 0.8rem; padding: 0.2rem 0.5rem;
        border: 1px solid #000; margin: 0.2rem;
      }

      /* --- SCIA DEL CURSORE --- */
      .cursor-trail {
        position: fixed; width: 10px; height: 10px; background-color: #c7955b; border-radius: 50%;
        transform: translate(-50%, -50%); pointer-events: none; animation: fadeOut 0.5s forwards; z-index: 9999;
      }
      @keyframes fadeOut { to { opacity: 0; transform: translate(-50%, -50%) scale(0); } }
      
      /* --- FORM DI CONTRIBUTO --- */
      .contribute-section { position: fixed; bottom: 20px; right: 20px; z-index: 101; font-size: 14px; }
      .contribute-section summary { cursor: pointer; padding: 8px 12px; background-color: #fff; border: 1px solid #000; display: inline-block; }
      .contribute-form { margin-top: 10px; padding: 20px; background-color: #fff; border: 1px solid #000; width: 280px; box-shadow: 0 4px 15px rgba(0,0,0,0.1); }
      .form-group { margin-bottom: 15px; }
      .form-group label { display: block; margin-bottom: 5px; font-weight: 600; }
      .form-group input, .form-group textarea, .form-group select { width: 100%; padding: 8px; border: 1px solid #ccc; box-sizing: border-box; }
      .submit-btn { width: 100%; padding: 10px; background-color: #000; color: #fff; border: none; cursor: pointer; font-size: 1em; }
      .submit-btn:disabled { background-color: #888; }
      .form-message { margin-top: 10px; padding: 10px; }
      .form-message.success { background-color: #e0f8e0; border: 1px solid #5cb85c; }
      .form-message.error { background-color: #f8e0e0; border: 1px solid #d9534f; }

      /* --- PANNELLO LATERALE A COMPARSA --- */
      .panel-overlay {
        position: fixed; top: 0; left: 0; width: 100%; height: 100%;
        background-color: rgba(0, 0, 0, 0.5); z-index: 99;
        opacity: 0; visibility: hidden; transition: opacity 0.4s ease, visibility 0.4s ease;
      }
      .panel-overlay.open { opacity: 1; visibility: visible; }
      .side-panel {
        position: fixed; top: 0; right: 0;
        width: 50vw; height: 100vh;
        background-color: #fff;
        box-shadow: -4px 0 15px rgba(0,0,0,0.1); z-index: 100;
        transform: translateX(100%); transition: transform 0.4s ease-in-out;
        padding: 40px; box-sizing: border-box; overflow-y: auto;
      }
      .side-panel.open { transform: translateX(0); }
      .panel-close-btn { position: absolute; top: 20px; right: 20px; background: none; border: none; font-size: 28px; cursor: pointer; }
      .panel-image { width: 100%; max-height: 40vh; object-fit: cover; margin-bottom: 20px; }
      .panel-title { font-size: 2em; margin: 0 0 10px 0; }
      .panel-description { margin: 0 0 20px 0; }
      .panel-categories { border-top: 1px solid #eee; padding-top: 15px; }
    </style>
  </head>
  <body>
    <div class="image-canvas">
      <h1>
        {dataCorrente}
        <br />
        {oraCorrente}
      </h1>

      {items.map(item => (
        <div class="card" data-id={item.id}>
          {item.image && <img src={item.image} alt={item.name} />}
        </div>
      ))}
    </div>

    <div id="panelOverlay" class="panel-overlay"></div>
    <div id="sidePanel" class="side-panel">
      <button id="closePanelBtn" class="panel-close-btn">&times;</button>
      <img id="panelImage" src="" alt="" class="panel-image" />
      <h2 id="panelTitle" class="panel-title"></h2>
      <p id="panelDescription" class="panel-description"></p>
      <div id="panelCategories" class="panel-categories"></div>
    </div>

    <details class="contribute-section">
      <summary>Vuoi contribuire all'archivio?</summary>
      <form id="contribute-form" class="contribute-form">
        <div class="form-group"><label for="title">Titolo *</label><input type="text" id="title" name="title" required /></div>
        <div class="form-group"><label for="description">Descrizione *</label><textarea id="description" name="description" rows="4" required></textarea></div>
        <div class="form-group"><label for="category">Categoria</label><select id="category" name="category"><option value="">Seleziona...</option><option value="Neri">Neri</option><option value="Siamesi">Siamesi</option><option value="Europei">Europei</option><option value="Altro">Altro</option></select></div>
        <div class="form-group"><label for="image-url">URL Immagine</label><input type="url" id="image-url" name="imageUrl" placeholder="https://esempio.com/immagine.jpg" /><small>Inserisci il link di un'immagine gi√† online.</small></div>
        <button type="submit" class="submit-btn">Invia contributo</button>
        <div id="form-message" class="form-message"></div>
      </form>
    </details>

    <script is:inline>
      // Inietta i dati dal frontmatter in un oggetto JS
      const allItems = {
        ${items.map(item => `'${item.id}': ${JSON.stringify(item)}`).join(',\n')}
      };

      document.addEventListener('DOMContentLoaded', () => {
        const canvas = document.querySelector('.image-canvas');
        const cards = document.querySelectorAll('.card');
        const title = document.querySelector('h1');
        
        // --- SCRIPT DI POSIZIONAMENTO GARANTITO (CORRETTO) ---
        if (cards.length > 0) {
            const cardWidth = 100;
            const cardHeight = 100;
            const margin = 20;
            const canvasWidth = canvas.offsetWidth;
            const titleRect = title.getBoundingClientRect();
            const cols = Math.floor(canvasWidth / (cardWidth + margin));
            const cellWidth = canvasWidth / cols;
            let cells = [];
            const numRows = Math.ceil(cards.length / cols) + 4;
            canvas.style.height = `${numRows * (cardHeight + margin)}px`;
            for (let i = 0; i < numRows; i++) {
                for (let j = 0; j < cols; j++) {
                    const cell = { x: j * cellWidth, y: i * (cardHeight + margin), width: cellWidth, height: cardHeight + margin };
                    const isOverlappingTitle = !(cell.x + cell.width < titleRect.left || cell.x > titleRect.right || cell.y + cell.height < titleRect.top || cell.y > titleRect.bottom);
                    if (!isOverlappingTitle) { cells.push({ row: i, col: j }); }
                }
            }
            for (let i = cells.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [cells[i], cells[j]] = [cells[j], cells[i]];
            }
            cards.forEach((card, index) => {
                if (index < cells.length) {
                    const cell = cells[index];
                    const jitterX = Math.random() * (cellWidth - cardWidth);
                    const jitterY = Math.random() * margin;
                    card.style.left = `${cell.col * cellWidth + jitterX}px`;
                    card.style.top = `${cell.row * (cardHeight + margin) + jitterY}px`;
                } else {
                    card.style.display = 'none';
                }
            });
        }
        // --- FINE SCRIPT DI POSIZIONAMENTO ---


        // --- Scia del cursore ---
        document.body.addEventListener('mousemove', (e) => {
          const trail = document.createElement('div');
          trail.className = 'cursor-trail';
          document.body.appendChild(trail);
          trail.style.left = e.clientX + 'px';
          trail.style.top = e.clientY + 'px';
          setTimeout(() => { trail.remove(); }, 500);
        });

        // --- SCRIPT PER IL PANNELLO LATERALE ---
        const sidePanel = document.getElementById('sidePanel');
        const panelOverlay = document.getElementById('panelOverlay');
        const closePanelBtn = document.getElementById('closePanelBtn');
        const panelImage = document.getElementById('panelImage');
        const panelTitle = document.getElementById('panelTitle');
        const panelDescription = document.getElementById('panelDescription');
        const panelCategories = document.getElementById('panelCategories');

        const openPanel = (item) => {
          if (!item) return;
          panelImage.src = item.image || '';
          panelImage.alt = item.name || '';
          panelTitle.textContent = item.name || 'No Title';
          panelDescription.textContent = item.description || 'No Description';
          
          panelCategories.innerHTML = '';
          [item.category, item.region, item.seasonality, item.producers].filter(Boolean).forEach(cat => {
            const span = document.createElement('span');
            span.className = 'category';
            span.textContent = cat;
            panelCategories.appendChild(span);
          });

          panelOverlay.classList.add('open');
          sidePanel.classList.add('open');
          document.body.classList.add('panel-open');
        };

        const closePanel = () => {
          panelOverlay.classList.remove('open');
          sidePanel.classList.remove('open');
          document.body.classList.remove('panel-open');
        };

        cards.forEach(card => {
          card.addEventListener('click', () => {
            const itemId = card.dataset.id;
            const itemData = allItems[itemId];
            openPanel(itemData);
          });
        });

        closePanelBtn.addEventListener('click', closePanel);
        panelOverlay.addEventListener('click', closePanel);
      });
    </script>

    <script is:inline>
      // Script del form
      document.getElementById('contribute-form')?.addEventListener('submit', async (e) => {
        e.preventDefault();
        const submitBtn = e.target.querySelector('.submit-btn');
        const messageDiv = document.getElementById('form-message');
        submitBtn.disabled = true; submitBtn.textContent = 'Invio in corso...'; messageDiv.textContent = '';
        const imageUrl = document.getElementById('image-url').value.trim();
        const formData = {
          // CORREZIONE: invia 'Name' invece di 'Title'
          Name: document.getElementById('title').value,
          Description: document.getElementById('description').value,
          Category: document.getElementById('category').value,
        };
        if (imageUrl) { formData.Image = [{ url: imageUrl }]; }
        try {
          const response = await fetch(`https://api.airtable.com/v0/${import.meta.env.PUBLIC_AIRTABLE_BASE_ID}/${import.meta.env.PUBLIC_AIRTABLE_TABLE_NAME}`, {
            method: 'POST',
            headers: { 'Authorization': `Bearer ${import.meta.env.PUBLIC_AIRTABLE_API_KEY}`, 'Content-Type': 'application/json' },
            body: JSON.stringify({ fields: formData })
          });
          const responseData = await response.json();
          if (response.ok) {
            messageDiv.textContent = '‚úÖ Contributo inviato! Ricarica la pagina per vederlo.';
            messageDiv.className = 'form-message success';
            e.target.reset();
          } else {
            messageDiv.textContent = `‚ùå Errore: ${responseData.error?.message || 'Errore sconosciuto'}`;
            messageDiv.className = 'form-message error';
          }
        } catch (error) {
          messageDiv.textContent = '‚ùå Errore di rete. Riprova.';
          messageDiv.className = 'form-message error';
        } finally {
          submitBtn.disabled = false;
          submitBtn.textContent = 'Invia contributo';
        }
      });
    </script>
  </body>
</html>
---
import Airtable from 'airtable';

// Configura Airtable
const base = new Airtable({
  apiKey: import.meta.env.PUBLIC_AIRTABLE_API_KEY
}).base(import.meta.env.PUBLIC_AIRTABLE_BASE_ID);

// Recupera i dati
let items = [];
try {
  const records = await base(import.meta.env.PUBLIC_AIRTABLE_TABLE_NAME)
    .select({ maxRecords: 100 })
    .all();
  
  items = records.map(record => ({
    id: record.id,
    name: record.fields.Name,
    description: record.fields.Description,
    category: record.fields.Category,
    region: record.fields.Region,
    seasonality: record.fields.Seasonality,
    producers: record.fields.Producers,
    edited: record.fields.Edited?.[0]?.url,
  }));
} catch (error)  {
  console.error('Errore caricamento dati:', error);
}

const titolo = "Slow Food";
const today = new Date().toLocaleString('en-US', { month: 'short', day: 'numeric' }).toUpperCase();
const currentTime = new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: false });
---

<html lang="en">
<head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{titolo}</title> 
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap" rel="stylesheet">

    <style is:global>
        html, * {
            cursor: none;
        }

        body {
            background-color: #d8caa7;
            color: #fd6814;
            font-family: 'Inter', sans-serif;
            margin: 0;
            padding: 0;
            overflow: hidden;
            user-select: none;
        }

        #custom-cursor {
            position: fixed;
            width: 32px;
            height: 32px;
            pointer-events: none;
            z-index: 999999;
            left: 0;
            top: 0;
            will-change: transform;
            transition: opacity 0.2s ease, transform 0.2s ease;
            opacity: 0;
        }
        
        #custom-cursor.hidden {
            opacity: 0;
            transform: scale(0.5);
        }

        .site-title, .date-display, .time-display {
            position: fixed;
            top: 40px;
            font-size: 1.5em;
            font-weight: bold;
            color: #22140c;
            z-index: 1000;
        }
        
        .site-title {
            left: 50%;
            transform: translateX(-50%);
        }
        .date-display {
            left: 40px;
        }
        .time-display {
             right: 40px;
        }

        .main-content {
            display: flex;
            width: 100%;
            height: 100vh;
            position: relative;
        }
        
        #intro-spiral {
            position: fixed;
            top: 50%;
            left: 50%;
            width: 300px;
            height: 300px;
            transform: translate(-50%, -50%);
            z-index: 1001;
            cursor: pointer;
            transition: opacity 0.5s ease;
            overflow: visible;
        }
        
        #intro-text {
            position: fixed;
            top: calc(50% + 300px);
            left: 50%;
            transform: translateX(-50%);
            font-size: 1.2em;
            color: #22140c;
            z-index: 1002;
            transition: opacity 0.3s ease;
        }

        #scroll-hint {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 1.2em;
            color: #22140c;
            z-index: 1002;
            opacity: 0;
            text-align: center;
            max-width: 600px;
            line-height: 1.4;
        }

        #scroll-hint.visible {
            opacity: 1;
        }

        .fade-letter {
            display: inline-block;
            opacity: 0;
            transform: translateY(8px);
            animation: fadeInLetter 0.5s ease-out forwards;
            font-size: inherit;
            line-height: inherit;
        }

        .fade-letter.space {
            width: 0.4em !important;
            min-width: 0.4em !important;
        }

        @keyframes fadeInLetter {
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        body.awakened #intro-spiral,
        body.awakened #intro-text {
            opacity: 0;
            pointer-events: none;
        }
        
        @keyframes spin-and-shrink {
            0% {
                transform: translate(-50%, -50%) rotate(0deg) scale(1);
            }
            70% {
                transform: translate(-50%, -50%) rotate(720deg) scale(0.08);
            }
            100% {
                transform: translate(var(--mouse-x), var(--mouse-y)) rotate(720deg) scale(0.08);
                opacity: 0;
            }
        }
        
        #intro-spiral.animating {
            animation: spin-and-shrink 2.5s ease-in-out forwards;
        }
        
        .content-area {
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            position: absolute;
            top: 0;
            left: 0;
            overflow: hidden;
            transition: transform 0.8s cubic-bezier(0.76, 0, 0.24, 1);
        }
        
        .manifesto-text {
            font-family: 'helvetica', serif;
            font-weight: bold;
            font-size: 1.5em; 
            color: #170e09;
            max-width: 700px;
            line-height: 1.2;
            text-align: center;
            position: absolute;
            top: 100%; left: 50%;
            z-index: 5;
            user-select: text;
            pointer-events: none;
            opacity: 0;
            transform: translate(-50%, 0) scale(1.5);
            transition: transform 0.6s cubic-bezier(0.68, -0.55, 0.27, 1.55), opacity 0.5s ease, top 0.6s cubic-bezier(0.68, -0.55, 0.27, 1.55);
        }
        
        .manifesto-text::selection { color: #fd6814; background: transparent; }
        .manifesto-text p { margin: 0 0 0.5em 0; }
        
        .instruction-text {
            position: fixed;
            bottom: 10vh;
            left: 50%;
            transform: translateX(-50%);
            font-size: 1.1em;
            color: #22140c;
            text-align: center;
            max-width: 90vw;
            line-height: 1.4;
            z-index: 30;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.5s ease, transform 0.5s ease;
        }
        
        .instruction-text.visible {
            opacity: 1;
            transform: translateX(-50%) translateY(0);
        }
        
        .instruction-text.moved-away {
            transform: translateX(-50%) translateY(-20px);
        }
        
        .image-container { 
            position: absolute; 
            top: 0; left: 0; 
            width: 100%; height: 100%; 
            z-index: 10; 
            overflow: hidden;
            pointer-events: none;
            opacity: 0;
            transform: scale(1.5);
            transition: transform 0.6s cubic-bezier(0.68, -0.55, 0.27, 1.55), opacity 0.5s ease;
        }
        
        .scattered-image { 
            position: absolute; 
            height: 150px; width: auto; 
            filter: brightness(0) saturate(100%) invert(52%) sepia(87%) saturate(1478%) hue-rotate(349deg) brightness(99%) contrast(98%);
            transition: transform 0.3s ease, filter 0.3s ease;
            z-index: 20;
            pointer-events: auto;
        }
        
        .scattered-image:hover { 
            transform: scale(1.1) rotate(5deg);
            filter: drop-shadow(6px 6px 10px rgba(253, 104, 20, 0.35));
        }
        
        .scattered-image.dragging { 
            z-index: 100; 
            transform: scale(1.15) rotate(7deg);
            filter: drop-shadow(10px 10px 20px rgba(253, 104, 20, 0.5));
        }
        
        #trail-canvas {
            position: fixed; top: 0; left: 0;
            width: 100%; height: 100%;
            z-index: 9998; pointer-events: none;
            opacity: 0;
            transition: opacity 0.5s ease;
        }
        
        #trail-canvas.active {
            opacity: 1;
        }
        
        #calendar-view {
            position: fixed;
            top: 0; left: 0;
            width: 100%; height: 100%;
            
            /* Layout a blocco con scroll */
            display: block;
            overflow-y: auto;
            
            padding: 100px 40px 40px 40px;
            box-sizing: border-box;
            background-color: #21150f;
            z-index: 200;
            
            opacity: 0;
            pointer-events: none;
            transform: translateY(100vh);
            transition: transform 0.8s cubic-bezier(0.76, 0, 0.24, 1), opacity 0.5s ease;
        }
        
        .month-container {
            margin-bottom: 35px; 
        }
        
        .month-title {
            width: 100%; 
            font-size: 1.5em; 
            font-weight: bold;
            text-align: left; 
            padding-bottom: 8px;
            background-color: transparent; 
            color: #fd6814; 
            z-index: 2; 
            margin-bottom: 15px;
            border-bottom: 2px solid #fd6814; 
        }
        
        /* === MODIFICA QUI === */
        .food-list {
            list-style: none;
            padding: 0;
            margin: 0;
            box-sizing: border-box;
            color: #d8caa7;
            font-size: 1.1em;
            text-align: left;
            width: 100%;
            
            /* Rimosso il layout a colonne */
            /* column-count: 4; */ 
            /* column-gap: 20px; */
        }
        
        .food-item {
            padding: 5px 8px;
            margin: 1px 0;
            font-weight: 500;
            border-radius: 4px;
            transition: color 0.2s ease, background-color 0.2s ease;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            
            /* Rimosso per evitare bug con colonna singola */
            /* break-inside: avoid-column; */
            
            /* Per estetica, puoi dare una larghezza massima se vuoi */
            max-width: 300px; 
        }
        /* === FINE MODIFICA === */

        .food-item:hover {
            color: #21150f; 
            background-color: #fd6814;
        }
        
        #hover-image-container {
            position: fixed;
            left: 0;
            top: 0;
            display: none;
            z-index: 10000;
            pointer-events: none;
            background: #d8caa7;
            border: 2px solid #fd6814;
            padding: 5px;
            border-radius: 4px;
            box-shadow: 0 4px 10px rgba(25, 14, 9, 0.3);
            will-change: transform;
            opacity: 0;
            transition: opacity 0.1s ease;
        }
        
        #hover-image-container img {
            display: block;
            width: 150px;
            height: 150px;
            object-fit: cover;
        }
        
        body.level-1 .image-container {
            transform: scale(1); opacity: 1; pointer-events: auto;
        }
        
        body.level-2 .content-area {
            transform: translateY(-100vh);
        }
        
        body.level-2 #calendar-view {
            transform: translateY(0);
            opacity: 1;
            pointer-events: auto;
        }

    </style>
    </head>
<body class="level-0">
    <div class="site-title">SLOW FOOD ARCHIVE</div>
    <div class="date-display">{today}</div>
    <div class="time-display" id="clock">{currentTime}</div>

    <div class="main-content">
        <div class="content-area">
            <div class="image-container">
                {items.map(item => (
                    item.edited && (
                        <img 
                            src={item.edited} 
                            alt={item.name} 
                            class="scattered-image" 
                            data-id={item.id}
                           />
                    )
                ))}
            </div>
            <div class="manifesto-text">
                <p>This century of ours, born and grown under the sign of industrial civilization, first invented the machine and then made it the model of its own life. Speed has become our chain, we are all victims of the same virus: "Fast-Life", which disrupts our habits, assails us even in our homes, confines us to eating at "Fast-Food". But man sapiens must recover his wisdom and free himself from the speed that can reduce him to an endangered species.</p>
            </div>
        </div>
    </div>
    
    <div id="instruction-1" class="instruction-text">
        gently move these foods aside to reveal our philosophy
    </div>
    <div id="instruction-2" class="instruction-text">
        Feel free to scroll.
    </div>
    
    <div id="calendar-view"></div>
    <canvas id="trail-canvas"></canvas>
    
    <svg id="intro-spiral" xmlns="http://www.w3.org/2000/svg" width="400" height="400" viewBox="0 0 24 24" fill="none" stroke="#170e09" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
        <path d="M27.39,22.47c-6.54,6.29-16.94,6.08-23.23-.46C-.86,16.78-.7,8.47,4.53,3.43,8.72-.59,15.37-.46,19.40,3.73c3.22,3.35,3.11,8.67-.23,11.89-2.68,2.58-6.94,2.49-9.51-.19-2.06-2.14-1.99-5.55.15-7.61,1.71-1.65,4.44-1.59,6.09.12,1.32,1.37,1.28,3.55-.1,4.87-1.1,1.05-2.84,1.02-3.9-.08-.84-.88-.82-2.27.06-3.12" fill="none" stroke="#160e0a" stroke-miterlimit="10"/>
    </svg>
    <div id="intro-text">The world rushes. Slow down... and gently wake me.</div>
    
    <div id="scroll-hint"></div>
        
    
    <svg id="custom-cursor" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="#170e09" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
        <path d="M27.39,22.47c-6.54,6.29-16.94,6.08-23.23-.46C-.86,16.78-.7,8.47,4.53,3.43,8.72-.59,15.37-.46,19.40,3.73c3.22,3.35,3.11,8.67-.23,11.89-2.68,2.58-6.94,2.49-9.51-.19-2.06-2.14-1.99-5.55.15-7.61,1.71-1.65,4.44-1.59,6.09.12,1.32,1.37,1.28,3.55-.1,4.87-1.1,1.05-2.84,1.02-3.9-.08-.84-.88-.82-2.27.06-3.12" fill="none" stroke="#160e0a" stroke-miterlimit="10"/>
    </svg>
    
    <div id="hover-image-container">
        <img src="" alt="Food preview" />
    </div>
    
    <script define:vars={{ items }}>
        // FUNZIONE PER LETTERE IN FADE-IN
        function createFadeLetters(container, text) {
            container.innerHTML = '';
            const words = text.split(' ');
            let totalDelay = 0;
            words.forEach((word, wordIndex) => {
                const wordSpan = document.createElement('span');
                wordSpan.className = 'fade-letter';
                wordSpan.textContent = word;
                wordSpan.style.animationDelay = `${totalDelay}ms`;
                wordSpan.style.display = 'inline-block';
                wordSpan.style.whiteSpace = 'nowrap';
                container.appendChild(wordSpan);
                totalDelay += 60;
                if (wordIndex < words.length - 1) {
                    const spaceSpan = document.createElement('span');
                    spaceSpan.className = 'fade-letter space';
                    spaceSpan.innerHTML = '&nbsp;';
                    spaceSpan.style.animationDelay = `${totalDelay}ms`;
                    container.appendChild(spaceSpan);
                    totalDelay += 20;
                }
            });
        }
    
        // FUNZIONE GENERAZIONE CALENDARIO (invariata)
        // (La logica di filtro per mese è già corretta qui)
        function generateCalendar(itemsData) {
            const calendarView = document.getElementById('calendar-view');
            const months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
            
            calendarView.innerHTML = ''; 
            
            months.forEach(month => {
                const monthContainer = document.createElement('div');
                monthContainer.className = 'month-container';
                
                const monthTitle = document.createElement('div');
                monthTitle.className = 'month-title';
                monthTitle.textContent = month.toUpperCase();
                
                const foodList = document.createElement('ul');
                foodList.className = 'food-list';
                
                // Questa funzione filtra correttamente gli alimenti
                const seasonalItems = itemsData.filter(item => 
                    item.seasonality && item.seasonality.includes(month)
                );
                
                seasonalItems.forEach(item => {
                    if (item.edited) {
                        const li = document.createElement('li');
                        li.className = 'food-item';
                        li.textContent = item.name;
                        li.dataset.imageUrl = item.edited;
                        foodList.appendChild(li);
                    }
                });
                
                monthContainer.appendChild(monthTitle);
                monthContainer.appendChild(foodList);
                calendarView.appendChild(monthContainer);
            });
        }
    
        // SCRIPT PRINCIPALE (DOMContentLoaded)
        document.addEventListener('DOMContentLoaded', () => {
            const introSpiral = document.getElementById('intro-spiral');
            const introText = document.getElementById('intro-text');
            const customCursor = document.getElementById('custom-cursor');
            const trailCanvas = document.getElementById('trail-canvas');
            const instruction1 = document.getElementById('instruction-1');
            const instruction2 = document.getElementById('instruction-2');
            const scrollHint = document.getElementById('scroll-hint');
            
            const calendarView = document.getElementById('calendar-view');
            const hoverContainer = document.getElementById('hover-image-container');
            const hoverImageEl = hoverContainer ? hoverContainer.querySelector('img') : null;
            
            let isAwakened = false;
            let trailActive = false;
            let enableScroll = false;
    
            // Orologio
            const clockElement = document.getElementById('clock');
            function updateClock() {
                if (clockElement) {
                    clockElement.textContent = new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: false });
                }
            }
            updateClock(); setInterval(updateClock, 1000);
    
            // Cursore custom e immagine hover
            const interactiveElements = document.querySelectorAll('a, button, .scattered-image, .manifesto-text, input, textarea, .food-item');
            let mouseX = 0, mouseY = 0, cursorX = 0, cursorY = 0;

            document.addEventListener('mousemove', (e) => { 
                mouseX = e.clientX; 
                mouseY = e.clientY; 
                
                if (hoverContainer && hoverContainer.style.display === 'block') {
                    hoverContainer.style.transform = `translate(${e.clientX + 20}px, ${e.clientY + 20}px)`;
                }
            });
            
            function animateCursor() {
                cursorX = mouseX; cursorY = mouseY;
                if (customCursor) { customCursor.style.transform = `translate(${cursorX}px, ${cursorY}px)`; }
                requestAnimationFrame(animateCursor);
            }
            animateCursor();
            interactiveElements.forEach(el => {
                el.addEventListener('mouseenter', () => customCursor.classList.add('hidden'));
                el.addEventListener('mouseleave', () => customCursor.classList.remove('hidden'));
            });
    
            // Animazione introduzione
            if (introSpiral) {
                introSpiral.addEventListener('click', (e) => {
                    if (!isAwakened) {
                        isAwakened = true;
                        if (introText) introText.style.opacity = '0';
                        introSpiral.style.setProperty('--mouse-x', `${mouseX}px`);
                        introSpiral.style.setProperty('--mouse-y', `${mouseY}px`);
                        introSpiral.classList.add('animating');
                        introSpiral.addEventListener('animationend', () => {
                            introSpiral.style.display = 'none';
                            if (customCursor) customCursor.style.opacity = '1';
                            document.body.classList.add('awakened');
                            
                            trailActive = true;
                            if (trailCanvas) trailCanvas.classList.add('active');
    
                            setTimeout(() => {
                                scrollHint.classList.add('visible');
                                const fullText = "The pace of the modern world is a deafening noise. It makes us forget the true taste of time. Now you will start a journey towards a more conscious way of experiencing food. In the Slow Food world, slowness is not a flaw; it is a virtue. Scroll down to follow me.";
                                createFadeLetters(scrollHint, fullText);
                                enableScroll = true;
                            }, 500);
                        }, { once: true });
                    }
                });
            }
    
            // Genera calendario
            generateCalendar(items);
            
            // Listener per hover su calendario
            if (calendarView && hoverContainer && hoverImageEl) {
                calendarView.addEventListener('mouseover', (e) => {
                    if (e.target.classList.contains('food-item')) {
                        const imgUrl = e.target.dataset.imageUrl;
                        if (imgUrl) {
                            hoverImageEl.src = imgUrl;
                            hoverContainer.style.display = 'block';
                            hoverContainer.style.transform = `translate(${mouseX + 20}px, ${mouseY + 20}px)`;
                            hoverContainer.style.opacity = '1';
                        }
                    }
                });
        
                calendarView.addEventListener('mouseout', (e) => {
                    if (e.target.classList.contains('food-item')) {
                        hoverContainer.style.opacity = '0';
                        setTimeout(() => {
                            if (hoverContainer.style.opacity === '0') {
                                hoverContainer.style.display = 'none';
                                hoverImageEl.src = '';
                            }
                        }, 100);
                    }
                });
            }
    
            // Logica drag & drop immagini
            const manifesto = document.querySelector('.manifesto-text');
            const images = document.querySelectorAll('.scattered-image');
            let imagesMovedAway = 0;
            const totalImages = images.length;
            function checkImagesMovedAway() {
                imagesMovedAway = 0;
                const currentManifestoRect = manifesto.getBoundingClientRect();
                images.forEach(img => {
                    const imgRect = img.getBoundingClientRect();
                    const overlap = calculateOverlap(currentManifestoRect, imgRect);
                    if (overlap < 0.2) {
                        imagesMovedAway++;
                    }
                });
                return imagesMovedAway === totalImages;
            }
            function calculateOverlap(rect1, rect2) {
                const xOverlap = Math.max(0, Math.min(rect1.right, rect2.right) - Math.max(rect1.left, rect2.left));
                const yOverlap = Math.max(0, Math.min(rect1.bottom, rect2.bottom) - Math.max(rect1.top, rect2.top));
                const overlapArea = xOverlap * yOverlap;
                const combinedArea = (rect1.width * rect1.height) + (rect2.width * rect2.height);
                return overlapArea / combinedArea;
            }
            const imagesArray = Array.from(images);
            function shuffle(arr) {
                for (let i = arr.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [arr[i], arr[j]] = [arr[j], arr[i]];
                }
            }
            shuffle(imagesArray);
            images.forEach(img => {
                img.dataset.targetTop = `${Math.random() * 70 + 5}vh`;
                img.dataset.targetLeft = `${Math.random() * 70 + 5}vw`;
                img.dataset.targetRotate = `${Math.random() * 30 - 15}deg`;
                img.style.top = '50%';
                img.style.left = '50%';
                img.style.transform = `translate(-50%, -50%) scale(0)`;
                img.style.opacity = '0';
            });
    
            let isDragging = false, activeImage = null, offsetX = 0, offsetY = 0;
            images.forEach(image => {
                image.addEventListener('mousedown', (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    activeImage = image;
                    activeImage.style.transition = 'none';
                    const rect = image.getBoundingClientRect();
                    offsetX = e.clientX - rect.left;
                    offsetY = e.clientY - rect.top;
                    activeImage.classList.add('dragging');
                });
            });
            document.addEventListener('mousemove', (e) => {
                if (activeImage) {
                    isDragging = true;
                    const pRect = activeImage.parentElement.getBoundingClientRect();
                    activeImage.style.left = `${e.clientX - pRect.left - offsetX}px`;
                    activeImage.style.top = `${e.clientY - pRect.top - offsetY}px`;
                }
            });
            document.addEventListener('mouseup', () => {
                if (activeImage) {
                    activeImage.style.transition = 'top 0.8s ease-out, left 0.8s ease-out, transform 0.8s ease-out, opacity 0.8s ease-out';
                    activeImage.classList.remove('dragging');
                    activeImage = null;
                    setTimeout(() => {
                        isDragging = false;
                        if (document.body.classList.contains('level-1') && checkImagesMovedAway()) {
                            instruction1.classList.add('moved-away');
                            setTimeout(() => {
                                instruction1.classList.remove('visible');
                                instruction2.classList.add('visible');
                            }, 500);
                        }
                    }, 300);
                }
            });
            images.forEach(image => {
                image.addEventListener('dblclick', (event) => {
                    if (isDragging) return;
                    const itemId = image.dataset.id;
                    if (itemId) { window.location.href = `/items/${itemId}`; }
                });
            });
    
            // TRAIL CANVAS
            const canvas = document.getElementById('trail-canvas');
            const ctx = canvas.getContext('2d');
            canvas.width = window.innerWidth; canvas.height = window.innerHeight;
            let mouse = { x: window.innerWidth / 2, y: window.innerHeight / 2 };
            let lastMouse = { x: mouse.x, y: mouse.y };
            window.addEventListener('mousemove', (event) => { mouse.x = event.clientX; mouse.y = event.clientY; });
            function animateTrail() {
                if (trailActive) {
                    ctx.globalCompositeOperation = 'destination-out';
                    ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';
                    ctx.fillRect(0, 0, canvas.width, canvas.height);
                    ctx.globalCompositeOperation = 'source-over';
                    const dx = mouse.x - lastMouse.x, dy = mouse.y - lastMouse.y;
                    const distance = Math.sqrt(dx * dx + dy * dy), angle = Math.atan2(dy, dx);
                    const radius = 10, stepSize = 5;
                    for (let i = 0; i < distance; i += stepSize) {
                        const x = lastMouse.x + Math.cos(angle) * i;
                        const y = lastMouse.y + Math.sin(angle) * i;
                        const trailHead = ctx.createRadialGradient(x, y, 0, x, y, radius);
                        trailHead.addColorStop(0, 'rgba(253, 104, 20, 0.5)');
                        trailHead.addColorStop(1, 'rgba(253, 104, 20, 0)');
                        ctx.fillStyle = trailHead;
                        ctx.beginPath();
                        ctx.arc(x, y, radius, 0, Math.PI * 2);
                        ctx.fill();
                    }
                    lastMouse.x = mouse.x;
                    lastMouse.y = mouse.y;
                }
                requestAnimationFrame(animateTrail);
            }
            animateTrail();
            window.addEventListener('resize', () => { canvas.width = window.innerWidth; canvas.height = window.innerHeight; });
    
            // SCROLL LOGIC
            let currentLevel = 0;
            const maxLevel = 2;
            let isTransitioning = false;
            let level1Scrolled = 0;
            let manifestoRevealed = false;
            let instruction1Shown = false;
            let instruction2Shown = false;
            const imageThreshold = 80;
            const transitionDuration = 800;
            document.addEventListener('wheel', (e) => {
                if (!enableScroll || isTransitioning) return;
                const scrollHint = document.getElementById('scroll-hint');
                if (scrollHint) {
                    scrollHint.style.opacity = '0';
                    scrollHint.style.display = 'none';
                    scrollHint.style.visibility = 'hidden';
                }
                if (currentLevel === 0 && e.deltaY > 0) {
                    currentLevel = 1;
                    document.body.classList.add('level-1');
                    isTransitioning = true;
                    setTimeout(() => { isTransitioning = false; }, transitionDuration);
                    return;
                }
                if (currentLevel === 1 && e.deltaY > 0) {
                    level1Scrolled += Math.abs(e.deltaY);
                    const numToReveal = Math.min(totalImages, Math.floor(level1Scrolled / imageThreshold));
                    for (let i = 0; i < numToReveal; i++) {
                        const img = imagesArray[i];
                        if (!img.classList.contains('revealed')) {
                            img.style.transition = 'top 0.8s ease-out, left 0.8s ease-out, transform 0.8s ease-out, opacity 0.8s ease-out';
                            img.style.top = img.dataset.targetTop;
                            img.style.left = img.dataset.targetLeft;
                            img.style.transform = `rotate(${img.dataset.targetRotate}) scale(1)`;
                            img.style.opacity = '1';
                            img.classList.add('revealed');
                        }
                    }
                    if (numToReveal >= totalImages && !manifestoRevealed) {
                        manifesto.style.top = '50%';
                        manifesto.style.transform = 'translate(-50%, -50%) scale(1)';
                        manifesto.style.opacity = '1';
                        manifestoRevealed = true;
                        setTimeout(() => {
                            instruction1.classList.add('visible');
                            instruction1Shown = true;
                        }, 600);
                    }
                }
                if (currentLevel === 1 && e.deltaY > 0 && instruction2Shown) {
                    currentLevel = 2;
                    document.body.classList.add('level-2');
                    document.body.classList.remove('level-1');
                    isTransitioning = true;
                    setTimeout(() => { isTransitioning = false; }, transitionDuration);
                }
            }, { passive: true });
            const checkInterval = setInterval(() => {
                if (instruction1Shown && !instruction2Shown && checkImagesMovedAway()) {
                    clearInterval(checkInterval);
                    instruction1.classList.add('moved-away');
                    setTimeout(() => {
                        instruction1.classList.remove('visible');
                        setTimeout(() => {
                            instruction2.classList.add('visible');
                            instruction2Shown = true;
                        }, 300);
                    }, 500);
                }
            }, 200);
        });
    </script>
</body>
</html>
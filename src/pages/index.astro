---
// la riga in questi trattini dice all'indice quali devono essere le caratteristiche di base
import Airtable from 'airtable';

// Configura Airtable
const base = new Airtable({
  apiKey: import.meta.env.PUBLIC_AIRTABLE_API_KEY
}).base(import.meta.env.PUBLIC_AIRTABLE_BASE_ID);

// Recupera i dati
let items = [];
try {
  const records = await base(import.meta.env.PUBLIC_AIRTABLE_TABLE_NAME)
  .select({ maxRecords: 100 })
    .all();
 
  items = records.map(record => ({
    id: record.id,
    name: record.fields.Name,
    description: record.fields.Description,
    image: record.fields.Edited?.[0]?.url,
    category: record.fields.Category,
    region: record.fields.Region,
    seasonality: record.fields.Seasonality,
    producers: record.fields.Producers
  }));
} catch (error) {
  console.error('Errore caricamento dati:', error);
}

// Mescola TUTTE le immagini
const shuffledItems = [...items].sort(() => 0.5 - Math.random());

// --- Logica per la data ---
const now = new Date();
const months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
const day = now.getDate();
const month = months[now.getMonth()];
const year = now.getFullYear();
const dataCorrente = `${day} ${month}`;
---

<html lang="en">
<head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Archivio</title>

    <style>
      /* --- IMPOSTAZIONI GLOBALI --- */
      html {
        cursor: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 16 16'><circle cx='8' cy='8' r='2' fill='%23D2B48C'/><circle cx='8' cy='8' r='7' stroke='%23D2B48C' stroke-width='1' fill='none'/></svg>"), auto;
      }
      
      body {
        background-color: #ffffff;
        color: #ff6600;
        font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        line-height: 1.6; margin: 0; padding: 0; 
        overflow: hidden; 
      }


      /* --- HEADER SITO --- */
      .site-header {
        position: relative;
        z-index: 10;
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 0px; 
        margin: 0px;
        font-size: 1.2rem;
        font-weight: 600;
        color: #ff6600;
      }  
      .site-header h3 {
        margin: 0;
      }

      /* --- CONTENITORE DATA DI SFONDO --- */
      .date-background {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        z-index: 1;
        display: flex;
        justify-content: center;
        align-items: center;
        overflow: hidden;
      }

      /* --- TIPOGRAFIA (H1) --- */
      h1 {
        font-size: 25vmin; 
        font-weight: 700;
        text-align: center;
        line-height: 0.8;
        margin: 0;
        padding: 0;
        color: #ff6600;
        user-select: none;
        white-space: nowrap;
      }

      /* --- CONTENITORE IMMAGINI (MODIFICATO) --- */
      .image-canvas {
        position: relative;
        z-index: 10;
        margin: 0 20px;
        height: calc(100vh - 160px); 
        overflow:hidden;
      }

      /* --- Stile per i link delle card (MODIFICATO) --- */
      .card-link {
        text-decoration: none;
        display: block;
        position: absolute;
        cursor: pointer; /* Cambiato in 'pointer' */
        opacity: 0;
        transform: scale(0.8);
        transition: opacity 0.4s ease-out, transform 0.4s ease-out;
      }
      
      .card-link.is-visible {
        opacity: 1;
        transform: scale(1);
      }

      /* --- STILE DEL CONTENITORE 'card' --- */
      .card {
        position: relative;
        width: 100%;
        transition: transform 0.2s ease;
        color: #ff6600;
        pointer-events: none; /* Eventi passano al .card-link */
      }
      .card img {
        width: 100%; 
        height: auto;
        display: block;
        box-shadow: none;
      }
      
      .card-link.is-visible:hover .card {
        transform: scale(1.1);
        box-shadow: none;
      }
      
      /* --- FORM DI CONTRIBUTO --- */
      .contribute-section { position: fixed; bottom: 20px; right: 20px; z-index: 101; font-size: 14px; }
      .contribute-section summary { cursor: pointer; padding: 8px 12px; background-color: #3D2B1F; border: 1px solid #D2B48C; color: #D2B48C; display: inline-block; }
      .contribute-form { margin-top: 10px; padding: 20px; background-color: #3D2B1F; border: 1px solid #D2B48C; width: 280px; box-shadow: 0 4px 15px rgba(0,0,0,0.2); }
      .form-group { margin-bottom: 15px; }
      .form-group label { display: block; margin-bottom: 5px; font-weight: 600; }
      .form-group input, .form-group textarea, .form-group select { width: 100%; padding: 8px; border: 1px solid #D2B48C; background-color: #4a3a2a; color: #D2B48C; box-sizing: border-box; }
      .submit-btn { width: 100%; padding: 10px; background-color: #D2B48C; color: #3D2B1F; border: none; cursor: pointer; font-size: 1em; font-weight: bold; }
      .submit-btn:disabled { background-color: #888; }
      .form-message { margin-top: 10px; padding: 10px; }
      .form-message.success { background-color: #e0f8e0; border: 1px solid #5cb85c; color: #333; }
      .form-message.error { background-color: #f8e0e0; border: 1px solid #d9534f; color: #333; }
    </style>
</head>
<body>
  <header class="site-header">
    <h3>SLOW FOOD ARCHIVE {year}</h3>
  </header>
  
  <div class="date-background">
    <h1>{dataCorrente}</h1>
  </div>
  
  <div class="image-canvas">
    {shuffledItems.map(item => (
      
      <a href={`/items/${item.id}`} class="card-link" draggable="false"> 
        
        <div class="card">
          
          {item.image && <img src={item.image} alt={item.name} draggable="false" />} 
        
        </div>
      </a>
    ))}
  </div>

 

    <script is:inline>
      document.addEventListener('DOMContentLoaded', () => {
        const canvas = document.querySelector('.image-canvas');
        const cards = document.querySelectorAll('.card-link');
        
        const minCardWidth = 80;
        const maxCardWidth = 180;
        
        const canvasWidth = canvas.offsetWidth;
        const canvasHeight = canvas.offsetHeight;
        
        const delayIncrement = 200; // Ritardo

        // --- 1. POSIZIONAMENTO E APPARIZIONE STAGGERATA ---
        cards.forEach((card, index) => {
          const randWidth = Math.floor(Math.random() * (maxCardWidth - minCardWidth + 1)) + minCardWidth;
          card.style.width = `${randWidth}px`;
          
          const randX = Math.random() * (canvasWidth - randWidth);
          const estimatedCardHeight = randWidth * 1.2; 
          const randY = Math.random() * (canvasHeight - estimatedCardHeight); 
          const randZ = Math.floor(Math.random() * cards.length);

          card.style.left = `${randX}px`;
          card.style.top = `${randY}px`;
          card.style.zIndex = randZ;
          card.dataset.originalZ = randZ; 

          setTimeout(() => {
            card.classList.add('is-visible');
          }, index * delayIncrement);
        });

        // --- 2. LOGICA DRAG-AND-DROP (BLOCCO RE-INSERITO) ---
        let activeCard = null;
        let offsetX = 0;
        let offsetY = 0;
        let isDragging = false; // Flag per distinguere click da drag

        function dragStart(e) {
          activeCard = this; // 'this' è .card-link
          isDragging = false; // Resetta il flag

          // Ottieni coordinate iniziali (mouse o tocco)
          const clientX = e.clientX || e.touches[0].clientX;
          const clientY = e.clientY || e.touches[0].clientY;

          // Calcola l'offset del mouse dall'angolo in alto a sx della card
          offsetX = clientX - parseFloat(activeCard.style.left);
          offsetY = clientY - parseFloat(activeCard.style.top);

          // Porta la card in primo piano
          activeCard.style.zIndex = 1000;
          activeCard.style.cursor = 'grabbing';
          
          // Aggiungi i listener al documento intero per continuare il drag
          document.addEventListener('mousemove', dragMove);
          document.addEventListener('mouseup', dragEnd);
          document.addEventListener('touchmove', dragMove, { passive: false });
          document.addEventListener('touchend', dragEnd);
        }

        function dragMove(e) {
          if (!activeCard) return;
          isDragging = true; // Se il mouse si muove, è un drag

          // Previene lo scroll della pagina su mobile (anche se è bloccato)
          e.preventDefault();

          const clientX = e.clientX || e.touches[0].clientX;
          const clientY = e.clientY || e.touches[0].clientY;

          // Calcola nuova posizione
          let newLeft = clientX - offsetX;
          let newTop = clientY - offsetY;

          // Limita il movimento ai bordi del canvas
          const cardRect = activeCard.getBoundingClientRect();
          
          newLeft = Math.max(0, Math.min(newLeft, canvasWidth - cardRect.width));
          newTop = Math.max(0, Math.min(newTop, canvasHeight - cardRect.height));

          activeCard.style.left = `${newLeft}px`;
          activeCard.style.top = `${newTop}px`;
        }

        function dragEnd() {
          if (!activeCard) return;

          // Ripristina z-index e cursore
          activeCard.style.zIndex = activeCard.dataset.originalZ || 1;
          activeCard.style.cursor = 'pointer';

          // Rimuovi i listener dal documento
          document.removeEventListener('mousemove', dragMove);
          document.removeEventListener('mouseup', dragEnd);
          document.removeEventListener('touchmove', dragMove);
          document.removeEventListener('touchend', dragEnd);

          activeCard = null;
        }

        // Assegna i listener a ogni card
        cards.forEach(card => {
          card.addEventListener('mousedown', dragStart);
          card.addEventListener('touchstart', dragStart, { passive: false });

          // Previene il click sul link se l'utente stava trascinando
          card.addEventListener('click', (e) => {
            if (isDragging) {
              e.preventDefault(); // Blocca la navigazione
            }
          });
        });

      });
    </script>

    <script is:inline>
      document.getElementById('contribute-form')?.addEventListener('submit', async (e) => {
        e.preventDefault();
        const submitBtn = e.target.querySelector('.submit-btn');
        const messageDiv = document.getElementById('form-message');
        submitBtn.disabled = true; submitBtn.textContent = 'Invio in corso...'; messageDiv.textContent = '';
        const imageUrl = document.getElementById('image-url').value.trim();
        const formData = {
          Name: document.getElementById('title').value,
          Description: document.getElementById('description').value,
          Category: document.getElementById('category').value,
        };
        if (imageUrl) { formData.Image = [{ url: imageUrl }]; }
        try {
          const response = await fetch(`https://api.airtable.com/v0/${import.meta.env.PUBLIC_AIRTABLE_BASE_ID}/${import.meta.env.PUBLIC_AIRTABLE_TABLE_NAME}`, {
            method: 'POST',
            headers: { 'Authorization': `Bearer ${import.meta.env.PUBLIC_AIRTABLE_API_KEY}`, 'Content-Type': 'application/json' },
            body: JSON.stringify({ fields: formData })
          });
          const responseData = await response.json();
          if (response.ok) {
            messageDiv.textContent = '✅ Contributo inviato! Ricarica la pagina per vederlo.';
            messageDiv.className = 'form-message success';
            e.target.reset();
          } else {
            messageDiv.textContent = `❌ Errore: ${responseData.error?.message || 'Errore sconosciuto'}`;
            messageDiv.className = 'form-message error';
          }
        } catch (error) {
          messageDiv.textContent = '❌ Errore di rete. Riprova.';
          messageDiv.className = 'form-message error';
        } finally {
          submitBtn.disabled = false;
          submitBtn.textContent = 'Invia contributo';
        }
      });
    </script>
</body>
</html>
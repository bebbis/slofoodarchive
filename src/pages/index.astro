---
import Airtable from 'airtable';

// Configura Airtable
const base = new Airtable({
  apiKey: import.meta.env.PUBLIC_AIRTABLE_API_KEY
}).base(import.meta.env.PUBLIC_AIRTABLE_BASE_ID);

// Recupera i dati
let items = [];
try {
  const records = await base(import.meta.env.PUBLIC_AIRTABLE_TABLE_NAME)
    .select({ maxRecords: 100 })
    .all();
  
  items = records.map(record => ({
    id: record.id,
    name: record.fields.Name,
    description: record.fields.Description,
    category: record.fields.Category,
    region: record.fields.Region,
    seasonality: record.fields.Seasonality,
    producers: record.fields.Producers,
    edited: record.fields.Edited?.[0]?.url,
  }));
} catch (error)  {
  console.error('Errore caricamento dati:', error);
}

const titolo = "Slow Food";
const today = new Date().toLocaleString('en-US', { month: 'short', day: 'numeric' }).toUpperCase();
const currentTime = new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: false });
---

Â©<html lang="en">
<head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{titolo}</title> 

    <style is:global>
        html {
            cursor: none;
        }

        body {
            background-color: #d8caa7;
            color: #fd6814;
            font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
            margin: 0;
            padding: 0;
            overflow: hidden;
            user-select: none;
        }

        #custom-cursor {
            position: fixed;
            width: 32px;
            height: 32px;
            pointer-events: none;
            z-index: 999999;
            left: 0;
            top: 0;
            will-change: transform;
            transition: opacity 0.2s ease, transform 0.2s ease;
            opacity: 0;
        }
        
        #custom-cursor.hidden {
            opacity: 0;
            transform: scale(0.5);
        }

        .site-title, .date-display, .time-display {
            position: fixed;
            top: 40px;
            font-size: 1.5em;
            font-weight: bold;
            color: #22140c;
            z-index: 1000;
        }
        
        .site-title {
            left: 50%;
            transform: translateX(-50%);
        }
        .date-display {
            left: 40px;
        }
        .time-display {
             right: 40px;
        }

        .main-content {
            display: flex;
            width: 100%;
            height: 100vh;
            position: relative;
        }
        
        #intro-spiral {
            position: fixed;
            top: 50%;
            left: 50%;
            width: 300px;
            height: 300px;
            transform: translate(-50%, -50%);
            z-index: 1001;
            cursor: pointer;
            transition: opacity 0.5s ease;
            overflow: visible;
        }
        
        #intro-text {
            position: fixed;
            top: calc(50% + 300px);
            left: 50%;
            transform: translateX(-50%);
            font-size: 1.2em;
            color: #22140c;
            z-index: 1002;
            transition: opacity 0.3s ease;
        }
        
        body.awakened #intro-spiral,
        body.awakened #intro-text {
            opacity: 0;
            pointer-events: none;
        }
        
        @keyframes spin-and-shrink {
            0% {
                transform: translate(-50%, -50%) rotate(0deg) scale(1);
            }
            70% {
                transform: translate(-50%, -50%) rotate(720deg) scale(0.08);
            }
            100% {
                transform: translate(var(--mouse-x), var(--mouse-y)) rotate(720deg) scale(0.08);
                opacity: 0;
            }
        }
        
        #intro-spiral.animating {
            animation: spin-and-shrink 2.5s ease-in-out forwards;
        }
        
        .content-area {
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            position: absolute;
            top: 0;
            left: 0;
            overflow: hidden;
            /* MODIFICA: Aggiunta transizione per l'effetto scorrimento */
            transition: transform 0.8s cubic-bezier(0.76, 0, 0.24, 1);
        }
        
        .manifesto-text {
            font-family: 'helvetica', serif;
            font-weight: bold;
            font-size: 1.5em; 
            color: #170e09;
            max-width: 700px;
            line-height: 1.2;
            text-align: center;
            position: absolute;
            top: 100%; left: 50%;
            z-index: 5;
            user-select: text;
            pointer-events: none;
            opacity: 0;
            transform: translate(-50%, 0) scale(1.5);
            transition: transform 0.6s cubic-bezier(0.68, -0.55, 0.27, 1.55), opacity 0.5s ease, top 0.6s cubic-bezier(0.68, -0.55, 0.27, 1.55);
        }
        
        .manifesto-text::selection { color: #fd6814; background: transparent; }
        .manifesto-text p { margin: 0 0 0.5em 0; }
        
        .image-container { 
            position: absolute; 
            top: 0; left: 0; 
            width: 100%; height: 100%; 
            z-index: 10; 
            overflow: hidden;
            pointer-events: none;
            opacity: 0;
            transform: scale(1.5);
            transition: transform 0.6s cubic-bezier(0.68, -0.55, 0.27, 1.55), opacity 0.5s ease;
        }
        
        .scattered-image { 
            position: absolute; 
            height: 150px; width: auto; 
            filter: brightness(0) saturate(100%) invert(52%) sepia(87%) saturate(1478%) hue-rotate(349deg) brightness(99%) contrast(98%);
            transition: transform 0.3s ease, filter 0.3s ease;
            z-index: 20;
            pointer-events: auto;
        }
        
        .scattered-image:hover { 
            transform: scale(1.1) rotate(5deg);
            filter: drop-shadow(6px 6px 10px rgba(253, 104, 20, 0.35));
        }
        
        .scattered-image.dragging { 
            z-index: 100; 
            transform: scale(1.15) rotate(7deg);
            filter: drop-shadow(10px 10px 20px rgba(253, 104, 20, 0.5));
        }
        
        #trail-canvas {
            position: fixed; top: 0; left: 0;
            width: 100%; height: 100%;
            z-index: 9998; pointer-events: none;
            opacity: 0;
            transition: opacity 0.5s ease;
        }
        
        #trail-canvas.active {
            opacity: 1;
        }
        
        /* MODIFICA: Stile unificato e corretto per il calendario (Pagina 2) */
        #calendar-view {
            position: fixed;
            top: 0; left: 0;
            width: 100%; height: 100%;
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            grid-template-rows: repeat(3, 1fr);
            gap: 20px;
            padding: 40px;
            box-sizing: border-box;
            background-color: #d8caa7;
            z-index: 200;
            
            opacity: 0;
            pointer-events: none;
            transform: translateY(100vh); /* Parte da sotto lo schermo */
            transition: transform 0.8s cubic-bezier(0.76, 0, 0.24, 1), opacity 0.5s ease;
        }
        
        .month-container {
            border: 2px dashed #fd6814; display: flex; flex-direction: column;
            align-items: center; justify-content: flex-start;
            position: relative; overflow: hidden; background-color: #d8caa7;
        }
        
        .month-title {
            width: 100%; font-size: 1.1em; font-weight: bold;
            text-align: center; padding: 8px 0;
            background-color: #fd6814; color: #d8caa7;
            z-index: 2; margin-bottom: 10px;
        }
        
        .silhouettes-container {
            display: flex; flex-wrap: wrap; justify-content: center; align-items: flex-start;
            gap: 10px; padding: 0 10px 10px 10px;
            width: 100%; height: calc(100% - 50px);
            box-sizing: border-box; overflow-y: auto;
        }
        
        .month-silhouette {
            height: 45px; width: auto;
            filter: brightness(0) saturate(100%) invert(52%) sepia(87%) saturate(1478%) hue-rotate(349deg) brightness(99%) contrast(98%);
            opacity: 0.9;
        }
        
        body.level-1 .image-container {
            transform: scale(1); opacity: 1; pointer-events: auto;
        }
        
        /* MODIFICA: Nuove regole per la transizione a scorrimento */
        body.level-2 .content-area {
            transform: translateY(-100vh); /* Fa scorrere Pagina 1 verso l'alto */
        }
        
        body.level-2 #calendar-view {
            transform: translateY(0); /* Fa scorrere Pagina 2 in vista */
            opacity: 1;
            pointer-events: auto;
        }

    </style>
</head>
<body class="level-0">
    <div class="site-title">SLOW FOOD ARCHIVE</div>
    <div class="date-display">{today}</div>
    <div class="time-display" id="clock">{currentTime}</div>

    <div class="main-content">
        <div class="content-area">
            <div class="image-container">
                {items.map(item => (
                    item.edited && (
                        <img 
                            src={item.edited} 
                            alt={item.name} 
                            class="scattered-image" 
                            data-id={item.id}
                           />
                    )
                ))}
            </div>
            <div class="manifesto-text">
                <p>This century of ours, born and grown under the sign of industrial civilization, first invented the machine and then made it the model of its own life. Speed has become our chain, we are all victims of the same virus: "Fast-Life", which disrupts our habits, assails us even in our homes, confines us to eating at "Fast-Food". But man sapiens must recover his wisdom and free himself from the speed that can reduce him to an endangered species.</p>
            </div>
        </div>
    </div>
    
    <div id="calendar-view"></div>
    <canvas id="trail-canvas"></canvas>
    
    <svg id="intro-spiral" xmlns="http://www.w3.org/2000/svg" width="400" height="400" viewBox="0 0 24 24" fill="none" stroke="#170e09" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
        <path d="M27.39,22.47c-6.54,6.29-16.94,6.08-23.23-.46C-.86,16.78-.7,8.47,4.53,3.43,8.72-.59,15.37-.46,19.40,3.73c3.22,3.35,3.11,8.67-.23,11.89-2.68,2.58-6.94,2.49-9.51-.19-2.06-2.14-1.99-5.55.15-7.61,1.71-1.65,4.44-1.59,6.09.12,1.32,1.37,1.28,3.55-.1,4.87-1.1,1.05-2.84,1.02-3.9-.08-.84-.88-.82-2.27.06-3.12" fill="none" stroke="#160e0a" stroke-miterlimit="10"/>
    </svg>
    <div id="intro-text">tap to wake me up</div>
    <div id="scroll-hint" style="opacity: 0; transition: opacity 0.3s ease; color: #22140c; position: fixed; top: calc(50% + 300px); left: 50%; transform: translateX(-50%); font-size: 1.2em; z-index: 1002;">
        scroll down
    </div>
        
    
    <svg id="custom-cursor" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="#170e09" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
        <path d="M27.39,22.47c-6.54,6.29-16.94,6.08-23.23-.46C-.86,16.78-.7,8.47,4.53,3.43,8.72-.59,15.37-.46,19.40,3.73c3.22,3.35,3.11,8.67-.23,11.89-2.68,2.58-6.94,2.49-9.51-.19-2.06-2.14-1.99-5.55.15-7.61,1.71-1.65,4.44-1.59,6.09.12,1.32,1.37,1.28,3.55-.1,4.87-1.1,1.05-2.84,1.02-3.9-.08-.84-.88-.82-2.27.06-3.12" fill="none" stroke="#160e0a" stroke-miterlimit="10"/>
    </svg>
    
    <script define:vars={{ items }}>
        function generateCalendar(itemsData) {
            const calendarView = document.getElementById('calendar-view');
            const months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
            
            months.forEach(month => {
                const monthContainer = document.createElement('div'); monthContainer.className = 'month-container';
                const monthTitle = document.createElement('div'); monthTitle.className = 'month-title';
                monthTitle.textContent = month.toUpperCase();
                const silhouettesContainer = document.createElement('div'); silhouettesContainer.className = 'silhouettes-container';
                const seasonalItems = itemsData.filter(item => item.seasonality && item.seasonality.includes(month));
                seasonalItems.forEach(item => {
                    if (item.edited) {
                        const img = document.createElement('img');
                        img.src = item.edited; img.alt = item.name; img.className = 'month-silhouette';
                        silhouettesContainer.appendChild(img);
                    }
                });
                monthContainer.appendChild(monthTitle);
                monthContainer.appendChild(silhouettesContainer);
                calendarView.appendChild(monthContainer);
            });
        }
    
        document.addEventListener('DOMContentLoaded', () => {
            const introSpiral = document.getElementById('intro-spiral');
            const introText = document.getElementById('intro-text');
            const customCursor = document.getElementById('custom-cursor');
            const trailCanvas = document.getElementById('trail-canvas');
            let isAwakened = false;
            let trailActive = false;
            let enableScroll = false;
    
    
            const clockElement = document.getElementById('clock');
            function updateClock() {
                if (clockElement) {
                    clockElement.textContent = new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: false });
                }
            }
            updateClock(); setInterval(updateClock, 1000);
    
            const interactiveElements = document.querySelectorAll('a, button, .scattered-image, .manifesto-text, input, textarea');
            let mouseX = 0, mouseY = 0, cursorX = 0, cursorY = 0;
            document.addEventListener('mousemove', (e) => { mouseX = e.clientX; mouseY = e.clientY; });
            function animateCursor() {
                cursorX = (mouseX) * 1; cursorY = (mouseY) * 1;
                if (customCursor) { customCursor.style.transform = translate(${cursorX - 0}px, ${cursorY - 0}px); } 
                requestAnimationFrame(animateCursor);
            }
            animateCursor();
            interactiveElements.forEach(el => {
                el.addEventListener('mouseenter', () => customCursor.classList.add('hidden'));
                el.addEventListener('mouseleave', () => customCursor.classList.remove('hidden'));
            });
    
            if (introSpiral) {
                introSpiral.addEventListener('click', (e) => {
                    if (!isAwakened) {
                        isAwakened = true;
                        if (introText) introText.style.opacity = '0';
                        
                        const centerX = window.innerWidth / 2;
                        const centerY = window.innerHeight / 2;
                        const mouseXOffset = mouseX - centerX;
                        const mouseYOffset = mouseY - centerY;
                        
                        introSpiral.style.setProperty('--mouse-x', calc(-50% + ${mouseXOffset}px));
                        introSpiral.style.setProperty('--mouse-y', calc(-50% + ${mouseYOffset}px));
                        
                        introSpiral.classList.add('animating');
                        
                        setTimeout(() => {
                            document.body.classList.add('awakened');
                            if (customCursor) customCursor.style.opacity = '1';
                            trailActive = true;
                            if (trailCanvas) trailCanvas.classList.add('active');
    
                            const scrollHint = document.getElementById('scroll-hint');
                            if (scrollHint) {
                                setTimeout(() => {
                                    scrollHint.style.opacity = '1';
                                    enableScroll = true;
                                }, 500);
                            }
                        }, 2500);
    
                    }
                });
            }
    
            generateCalendar(items);
    
            const images = document.querySelectorAll('.scattered-image');
            let isDragging = false, activeImage = null, offsetX = 0, offsetY = 0;
    
            // --- INIZIO BLOCCO CORRETTO PER IL DRAG & DROP ---
            images.forEach(image => {
                image.addEventListener('mousedown', (e) => { 
                    e.preventDefault(); 
                    activeImage = image; 
                    
                    // Rimuovi la transizione per un movimento istantaneo
                    activeImage.style.transition = 'none';
                    
                    offsetX = e.clientX - image.getBoundingClientRect().left; 
                    offsetY = e.clientY - image.getBoundingClientRect().top; 
                    activeImage.classList.add('dragging'); 
                });
            });
    
            document.addEventListener('mousemove', (e) => { 
                if (activeImage) { 
                    isDragging = true; 
                    const pRect = activeImage.parentElement.getBoundingClientRect();
                    activeImage.style.left = ${e.clientX - pRect.left - offsetX}px; 
                    activeImage.style.top = ${e.clientY - pRect.top - offsetY}px; 
                } 
            });
    
            document.addEventListener('mouseup', () => { 
                if (activeImage) {
                    // Ripristina la transizione per le animazioni future
                    activeImage.style.transition = 'top 0.8s ease-out, left 0.8s ease-out, transform 0.8s ease-out, opacity 0.8s ease-out';
                    
                    activeImage.classList.remove('dragging'); 
                    activeImage = null; 
                    setTimeout(() => { isDragging = false; }, 50); 
                } 
            });
            // --- FINE BLOCCO CORRETTO ---
    
            images.forEach(image => {
                image.addEventListener('dblclick', (event) => {
                    if (isDragging) return;
                    const itemId = image.dataset.id;
                    if (itemId) { window.location.href = /items/${itemId}; }
                });
            });
    
            const canvas = document.getElementById('trail-canvas');
            const ctx = canvas.getContext('2d');
            canvas.width = window.innerWidth; canvas.height = window.innerHeight;
            let mouse = { x: window.innerWidth / 2, y: window.innerHeight / 2 };
            let lastMouse = { x: mouse.x, y: mouse.innerHeight / 2 };
            window.addEventListener('mousemove', (event) => { mouse.x = event.clientX; mouse.y = event.clientY; });
            function animateTrail() {
                if (trailActive) {
                    ctx.globalCompositeOperation = 'destination-out'; 
                    ctx.fillStyle = 'rgba(0, 0, 0, 0.05)'; 
                    ctx.fillRect(0, 0, canvas.width, canvas.height);
                    ctx.globalCompositeOperation = 'source-over'; 
                    
                    const dx = mouse.x - lastMouse.x, dy = mouse.y - lastMouse.y;
                    const distance = Math.sqrt(dx * dx + dy * dy), angle = Math.atan2(dy, dx);
                    const radius = 10, stepSize = 5;
                    for (let i = 0; i < distance; i += stepSize) {
                        const x = lastMouse.x + Math.cos(angle) * i; 
                        const y = lastMouse.y + Math.sin(angle) * i;
                        const trailHead = ctx.createRadialGradient(x, y, 0, x, y, radius);
                        trailHead.addColorStop(0, 'rgba(253, 104, 20, 0.5)'); 
                        trailHead.addColorStop(1, 'rgba(253, 104, 20, 0)');
                        ctx.fillStyle = trailHead; 
                        ctx.beginPath(); 
                        ctx.arc(x, y, radius, 0, Math.PI * 2); 
                        ctx.fill();
                    }
                    lastMouse.x = mouse.x; 
                    lastMouse.y = mouse.y;
                }
                requestAnimationFrame(animateTrail);
            }
            animateTrail();
            window.addEventListener('resize', () => { canvas.width = window.innerWidth; canvas.height = window.innerHeight; });
    
            let currentLevel = 0;
            const maxLevel = 2;
            let scrollTimeout;
            let isTransitioning = false;
            const transitionDuration = 800;
    
            let level1Scrolled = 0;
            let manifestoScrolled = 0;
            let toLevel2Scrolled = 0;
            const imageThreshold = 80;
            const manifestoThreshold = 100;
            const toLevel2Threshold = 500;
            let manifestoRevealed = false;
            const manifesto = document.querySelector('.manifesto-text');
            const imagesArray = Array.from(images);
            function shuffle(arr) {
                for (let i = arr.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [arr[i], arr[j]] = [arr[j], arr[i]];
                }
            }
            shuffle(imagesArray);
            const totalImages = imagesArray.length;
            images.forEach(img => {
                img.dataset.targetTop = ${Math.random() * 70 + 5}vh;
                img.dataset.targetLeft = ${Math.random() * 70 + 5}vw;
                img.dataset.targetRotate = ${Math.random() * 30 - 15}deg;
                img.style.top = '50%';
                img.style.left = '50%';
                img.style.transform = translate(-50%, -50%) scale(0);
                img.style.opacity = '0';
            });
    
            document.addEventListener('wheel', (e) => {
                if (!enableScroll || isTransitioning) return;
    
                const scrollHint = document.getElementById('scroll-hint');
                if (scrollHint) {
                    scrollHint.style.opacity = '0';
                }
    
                if (currentLevel === 0 && e.deltaY > 0) {
                    currentLevel = 1;
                    document.body.classList.add('level-1');
                    isTransitioning = true;
                    setTimeout(() => { isTransitioning = false; }, transitionDuration);
                    return;
                }
    
                if (currentLevel === 1 && e.deltaY > 0) {
                    level1Scrolled += Math.abs(e.deltaY);
                    const maxImageScroll = totalImages * imageThreshold;
                    if (level1Scrolled > maxImageScroll) {
                        const extra = level1Scrolled - maxImageScroll;
                        level1Scrolled = maxImageScroll;
                        if (!manifestoRevealed) {
                            manifestoScrolled += extra;
                            if (manifestoScrolled > manifestoThreshold) {
                                manifesto.style.top = '50%';
                                manifesto.style.transform = 'translate(-50%, -50%) scale(1)';
                                manifesto.style.opacity = '1';
                                manifestoRevealed = true;
                                manifestoScrolled = manifestoThreshold;
                            }
                        } else {
                            toLevel2Scrolled += extra;
                        }
                    }
    
                    const numToReveal = Math.min(totalImages, Math.floor(level1Scrolled / imageThreshold));
                    for (let i = 0; i < numToReveal; i++) {
                        const img = imagesArray[i];
                        if (!img.classList.contains('revealed')) {
                            img.style.transition = 'top 0.8s ease-out, left 0.8s ease-out, transform 0.8s ease-out, opacity 0.8s ease-out';
                            img.style.top = img.dataset.targetTop;
                            img.style.left = img.dataset.targetLeft;
                            img.style.transform = rotate(${img.dataset.targetRotate}) scale(1);
                            img.style.opacity = '1';
                            img.classList.add('revealed');
                        }
                    }
    
                    if (!manifestoRevealed || toLevel2Scrolled < toLevel2Threshold) {
                        return;
                    }
                }
    
                clearTimeout(scrollTimeout);
                scrollTimeout = setTimeout(() => {
                    const oldLevel = currentLevel;
                    let newLevel = currentLevel;
    
                    if (e.deltaY > 0 && currentLevel < maxLevel) {
                        newLevel++;
                    } 
                    else if (e.deltaY < 0 && currentLevel > 0) {
                        newLevel--;
                    }
                    
                    if (newLevel !== oldLevel) {
                        isTransitioning = true;
    
                        currentLevel = newLevel;
                        document.body.classList.remove('level-' + oldLevel);
                        document.body.classList.add('level-' - currentLevel);
    
                        setTimeout(() => {
                            isTransitioning = false;
                        }, transitionDuration);
                    }
                }, 50);
            }, { passive: true });
        });
    </script>
</body>
</html>